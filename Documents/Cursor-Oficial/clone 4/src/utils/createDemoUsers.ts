import { supabase } from '@/integrations/supabase/client';

const nomesFict√≠cios = [
  'Ana Silva', 'Carlos Santos', 'Maria Costa', 'Jo√£o Ferreira', 'Paula Oliveira',
  'Roberto Silva', 'Fernanda Lima', 'Pedro Almeida', 'Juliana Rocha', 'Rafael Mendes',
  'Camila Souza', 'Diego Barbosa', 'Larissa Pereira', 'Thiago Martins', 'Bianca Cardoso',
  'Lucas Rodrigues', 'Mariana Gomes', 'Bruno Nascimento', 'Gabriela Freitas', 'Vinicius Torres'
];

const cidadesBrasil = [
  'S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Bras√≠lia',
  'Fortaleza', 'Curitiba', 'Recife', 'Porto Alegre', 'Manaus',
  'Bel√©m', 'Goi√¢nia', 'Guarulhos', 'Campinas', 'S√£o Lu√≠s',
  'S√£o Gon√ßalo', 'Macei√≥', 'Duque de Caxias', 'Natal', 'Teresina'
];

const achievementsSample = [
  ['primeiro_login', 'sequencia_7_dias'],
  ['meta_peso', 'consistente'],
  ['super_pontuacao', 'lider_semanal'],
  ['transformacao_completa'],
  ['mentor', 'inspirador'],
  ['disciplinado', 'perseverante'],
  ['inovador', 'criativo'],
  ['colaborativo', 'motivador']
];

export const createDemoUsers = async () => {
  console.log('üé≠ Criando usu√°rios fict√≠cios para demonstra√ß√£o...');
  
  try {
    // Primeiro, vamos criar os profiles
    const profilesData = nomesFict√≠cios.map((nome, index) => ({
      user_id: `demo_user_${index + 1}`,
      full_name: nome,
      email: `${nome.toLowerCase().replace(' ', '.')}@demo.com`,
      role: 'client' as const,
      // Removendo campos que n√£o existem no schema
      // city: cidadesBrasil[index % cidadesBrasil.length],
      // last_active: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
      // achievements: achievementsSample[index % achievementsSample.length]
    }));

    // Inserir profiles
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .upsert(profilesData, { onConflict: 'user_id' })
      .select();

    if (profilesError) throw profilesError;

    console.log(`‚úÖ ${profiles.length} perfis criados`);

    // Agora criar os pontos para cada usu√°rio
    const pointsData = profiles.map((profile, index) => {
      const totalPoints = Math.floor(Math.random() * 5000) + 500; // 500-5500 pontos
      const weeklyPoints = Math.floor(totalPoints * 0.3 + Math.random() * 200); // ~30% dos pontos totais + varia√ß√£o
      const monthlyPoints = Math.floor(totalPoints * 0.6 + Math.random() * 300); // ~60% dos pontos totais + varia√ß√£o
      const dailyPoints = Math.floor(Math.random() * 150) + 20; // 20-170 pontos di√°rios
      const currentStreak = Math.floor(Math.random() * 30) + 1; // 1-30 dias de sequ√™ncia
      const completedChallenges = Math.floor(Math.random() * 50) + 5; // 5-55 desafios

      return {
        user_id: profile.id,
        total_points: totalPoints,
        weekly_points: weeklyPoints,
        monthly_points: monthlyPoints,
        daily_points: dailyPoints,
        current_streak: currentStreak,
        best_streak: Math.max(currentStreak, Math.floor(Math.random() * 50) + 10),
        completed_challenges: completedChallenges,
        level: Math.floor(totalPoints / 500) + 1, // N√≠vel baseado nos pontos
        updated_at: new Date().toISOString()
      };
    });

    // Inserir pontos
    const { error: pointsError } = await supabase
      .from('user_points')
      .upsert(pointsData, { onConflict: 'user_id' });

    if (pointsError) throw pointsError;

    console.log(`‚úÖ ${pointsData.length} registros de pontos criados`);

    // Criar algumas miss√µes di√°rias para tornar mais realista
    const missionsData = profiles.flatMap(profile => {
      const numMissions = Math.floor(Math.random() * 7) + 3; // 3-10 miss√µes por usu√°rio
      return Array.from({ length: numMissions }, (_, i) => ({
        user_id: profile.id,
        data: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        humor: (Math.floor(Math.random() * 5) + 1).toString(), // Convertendo para string
        nota_dia: Math.floor(Math.random() * 5) + 1,
        concluido: Math.random() > 0.3, // 70% de chance de estar conclu√≠do
        created_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString()
      }));
    });

    // Inserir miss√µes (em lotes para evitar timeout)
    const batchSize = 50;
    for (let i = 0; i < missionsData.length; i += batchSize) {
      const batch = missionsData.slice(i, i + batchSize);
      const { error: missionError } = await supabase
        .from('missao_dia')
        .upsert(batch, { onConflict: 'user_id,data' });

      if (missionError) {
        console.warn('Erro ao inserir miss√µes:', missionError);
      }
    }

    console.log(`‚úÖ ${missionsData.length} miss√µes di√°rias criadas`);

    // Criar pontua√ß√µes di√°rias
    const dailyScoresData = profiles.flatMap(profile => {
      const numDays = Math.floor(Math.random() * 14) + 7; // 7-21 dias de pontua√ß√£o
      return Array.from({ length: numDays }, (_, i) => ({
        user_id: profile.id,
        data: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        total_pontos_dia: Math.floor(Math.random() * 150) + 30, // 30-180 pontos por dia
        pontos_habitos: Math.floor(Math.random() * 50) + 10,
        pontos_mente: Math.floor(Math.random() * 50) + 10,
        pontos_ritual: Math.floor(Math.random() * 50) + 10,
        created_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString()
      }));
    });

    // Inserir pontua√ß√µes di√°rias (em lotes)
    for (let i = 0; i < dailyScoresData.length; i += batchSize) {
      const batch = dailyScoresData.slice(i, i + batchSize);
      const { error: scoresError } = await supabase
        .from('pontuacao_diaria')
        .upsert(batch, { onConflict: 'user_id,data' });

      if (scoresError) {
        console.warn('Erro ao inserir pontua√ß√µes:', scoresError);
      }
    }

    console.log(`‚úÖ ${dailyScoresData.length} pontua√ß√µes di√°rias criadas`);

    console.log('üéâ Usu√°rios fict√≠cios criados com sucesso!');
    return { success: true, count: profiles.length };

  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rios fict√≠cios:', error);
    throw error;
  }
};

// Fun√ß√£o para limpar usu√°rios demo (se necess√°rio)
export const cleanDemoUsers = async () => {
  console.log('üßπ Limpando usu√°rios fict√≠cios...');
  
  try {
    // Deletar em cascata: pontua√ß√µes -> miss√µes -> pontos -> profiles
    const { error: scoresError } = await supabase
      .from('pontuacao_diaria')
      .delete()
      .like('user_id', 'demo_user_%');

    const { error: missionsError } = await supabase
      .from('missao_dia')
      .delete()
      .in('user_id', (await supabase.from('profiles').select('id').like('user_id', 'demo_user_%')).data?.map(p => p.id) || []);

    const { error: pointsError } = await supabase
      .from('user_points')
      .delete()
      .in('user_id', (await supabase.from('profiles').select('id').like('user_id', 'demo_user_%')).data?.map(p => p.id) || []);

    const { error: profilesError } = await supabase
      .from('profiles')
      .delete()
      .like('user_id', 'demo_user_%');

    if (scoresError || missionsError || pointsError || profilesError) {
      console.warn('Alguns erros durante limpeza:', { scoresError, missionsError, pointsError, profilesError });
    }

    console.log('‚úÖ Usu√°rios fict√≠cios removidos');
    return { success: true };

  } catch (error) {
    console.error('‚ùå Erro ao limpar usu√°rios fict√≠cios:', error);
    throw error;
  }
}; 