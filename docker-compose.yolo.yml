version: '3.8'

services:
  # ðŸ¦¾ ServiÃ§o YOLO para DetecÃ§Ã£o de Alimentos
  yolo-service:
    build:
      context: .
      dockerfile: Dockerfile.yolo
    container_name: sofia-yolo-service
    ports:
      - "8001:8001"
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - ./models:/app/models  # Para modelos YOLO
      - ./logs:/app/logs      # Para logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ðŸ”§ Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: sofia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ðŸ“Š Prometheus para mÃ©tricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sofia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  redis_data:
  prometheus_data:
