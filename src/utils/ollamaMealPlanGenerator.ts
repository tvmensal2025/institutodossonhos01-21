import { supabase } from '@/integrations/supabase/client';

export interface OllamaMealPlanParams {
  calorias: number;
  proteinas: number;
  carboidratos: number;
  gorduras: number;
  fibras: number;
  dias: number;
  objetivo: string;
  restricoes: string[];
  preferencias: string[];
  observacoes: string;
  peso_kg: number;
  refeicoes_selecionadas: string[];
  distribuicao_calorias: { [key: string]: number };
}

export interface OllamaDetailedInstructionsParams {
  recipeName: string;
  ingredients: string;
  basicInstructions: string;
  prepTime: string;
  cookTime: string;
  mealType: string;
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
}

/**
 * Gera instru√ß√µes detalhadas de preparo usando Ollama
 */
export async function generateDetailedInstructions(params: OllamaDetailedInstructionsParams): Promise<string> {
  try {
    console.log('ü§ñ Gerando instru√ß√µes detalhadas com Ollama...');
    
    const prompt = `Voc√™ √© um chef profissional especializado em culin√°ria saud√°vel. 

Receita: ${params.recipeName}
Tipo de refei√ß√£o: ${params.mealType}
Ingredientes: ${params.ingredients}
Instru√ß√µes b√°sicas: ${params.basicInstructions}
Tempo de preparo: ${params.prepTime}
Tempo de cozimento: ${params.cookTime}
Informa√ß√µes nutricionais: ${params.calories} kcal, ${params.protein}g prote√≠na, ${params.carbs}g carboidratos, ${params.fat}g gordura

Gere instru√ß√µes de preparo DETALHADAS e PROFISSIONAIS seguindo estas regras:

1. **Estrutura clara**: Divida em passos numerados e bem organizados
2. **Detalhes t√©cnicos**: Inclua temperaturas, tempos espec√≠ficos, t√©cnicas de coc√ß√£o
3. **Dicas profissionais**: Adicione dicas de chef para melhor resultado
4. **Seguran√ßa**: Inclua cuidados de seguran√ßa quando necess√°rio
5. **Apresenta√ß√£o**: Sugira como servir e decorar
6. **Substitui√ß√µes**: Sugira alternativas saud√°veis quando poss√≠vel
7. **Linguagem**: Use linguagem clara e acess√≠vel, mas profissional
8. **Formato**: Use par√°grafos curtos e bem estruturados

Gere apenas as instru√ß√µes detalhadas, sem introdu√ß√£o ou conclus√£o.`;

    const response = await supabase.functions.invoke('gpt-chat', {
      body: {
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um chef profissional especializado em culin√°ria saud√°vel e nutritiva.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        service: 'ollama',
        model: 'llama3.2:3b',
        temperature: 0.7,
        max_tokens: 800
      }
    });

    if (response.error) {
      console.error('‚ùå Erro ao gerar instru√ß√µes detalhadas:', response.error);
      return params.basicInstructions; // Fallback para instru√ß√µes b√°sicas
    }

    const detailedInstructions = response.data?.choices?.[0]?.message?.content || params.basicInstructions;
    
    console.log('‚úÖ Instru√ß√µes detalhadas geradas com sucesso!');
    return detailedInstructions;

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o de instru√ß√µes detalhadas:', error);
    return params.basicInstructions; // Fallback para instru√ß√µes b√°sicas
  }
}

/**
 * Gera card√°pio completo usando Ollama
 */
export async function generateMealPlanWithOllama(params: OllamaMealPlanParams): Promise<any> {
  try {
    console.log('ü§ñ Gerando card√°pio com Ollama...');
    
    const prompt = `Gere um card√°pio nutricional completo para ${params.dias} dias com as seguintes especifica√ß√µes:

OBJETIVO: ${params.objetivo}
CALORIAS DI√ÅRIAS: ${params.calorias} kcal
MACRONUTRIENTES: ${params.proteinas}g prote√≠na, ${params.carboidratos}g carboidratos, ${params.gorduras}g gordura, ${params.fibras}g fibra
PESO: ${params.peso_kg} kg
REFEI√á√ïES: ${params.refeicoes_selecionadas.join(', ')}
RESTRI√á√ïES: ${params.restricoes.join(', ') || 'Nenhuma'}
PREFER√äNCIAS: ${params.preferencias.join(', ') || 'Nenhuma'}
OBSERVA√á√ïES: ${params.observacoes}

Gere um card√°pio JSON estruturado com:
- Nome da receita
- Descri√ß√£o
- Ingredientes detalhados
- Instru√ß√µes de preparo passo a passo
- Informa√ß√µes nutricionais por por√ß√£o
- Tempo de preparo e cozimento
- Dicas de chef

Formato JSON esperado:
{
  "days": [
    {
      "day": 1,
      "meals": [
        {
          "meal_type": "caf√© da manh√£",
          "recipe_name": "Nome da Receita",
          "recipe_description": "Descri√ß√£o",
          "prep_time": "15 minutos",
          "cook_time": "20 minutos",
          "calories": 300,
          "protein": 20,
          "carbs": 30,
          "fat": 10,
          "fiber": 5,
          "ingredients": "Ingredientes detalhados",
          "instructions": "Instru√ß√µes passo a passo detalhadas"
        }
      ]
    }
  ]
}`;

    const response = await supabase.functions.invoke('gpt-chat', {
      body: {
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um nutricionista e chef especializado em criar card√°pios personalizados e saud√°veis.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        service: 'ollama',
        model: 'llama3.2:3b',
        temperature: 0.8,
        max_tokens: 2000
      }
    });

    if (response.error) {
      console.error('‚ùå Erro ao gerar card√°pio com Ollama:', response.error);
      throw new Error('Falha na gera√ß√£o do card√°pio');
    }

    const mealPlanData = response.data?.choices?.[0]?.message?.content;
    
    if (!mealPlanData) {
      throw new Error('Resposta vazia do Ollama');
    }

    // Tentar fazer parse do JSON
    try {
      const parsedData = JSON.parse(mealPlanData);
      console.log('‚úÖ Card√°pio gerado com Ollama com sucesso!');
      return parsedData;
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      throw new Error('Formato de resposta inv√°lido');
    }

  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o do card√°pio com Ollama:', error);
    throw error;
  }
}

/**
 * Testa a conex√£o com Ollama
 */
export async function testOllamaConnection(): Promise<{ success: boolean; error?: string }> {
  try {
    console.log('üß™ Testando conex√£o com Ollama...');
    
    const response = await supabase.functions.invoke('gpt-chat', {
      body: {
        messages: [
          {
            role: 'user',
            content: 'Responda apenas "OK" se estiver funcionando.'
          }
        ],
        service: 'ollama',
        model: 'llama3.2:3b',
        temperature: 0.1,
        max_tokens: 10
      }
    });

    if (response.error) {
      console.error('‚ùå Erro na conex√£o com Ollama:', response.error);
      return { success: false, error: response.error.message };
    }

    const result = response.data?.choices?.[0]?.message?.content;
    console.log('‚úÖ Conex√£o com Ollama testada com sucesso!');
    return { success: !!result };

  } catch (error) {
    console.error('‚ùå Erro no teste de conex√£o com Ollama:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Erro desconhecido' };
  }
}

export interface OllamaMealieIntegrationParams {
  mealieBaseUrl: string;
  mealieApiKey?: string;
  ollamaModel: string;
  recipeCount?: number;
}

/**
 * Testa se o Ollama consegue acessar as receitas da Mealie
 */
export async function testOllamaMealieIntegration(params: OllamaMealieIntegrationParams): Promise<{
  success: boolean;
  recipeCount: number;
  sampleRecipes: any[];
  error?: string;
}> {
  try {
    console.log('üîó Testando integra√ß√£o Ollama + Mealie...');
    
    // 1. Buscar receitas da Mealie
    const mealieResponse = await fetch(`${params.mealieBaseUrl}/api/recipes?limit=${params.recipeCount || 10}`, {
      headers: params.mealieApiKey ? {
        'Authorization': `Bearer ${params.mealieApiKey}`,
        'Content-Type': 'application/json'
      } : {
        'Content-Type': 'application/json'
      }
    });
    
    if (!mealieResponse.ok) {
      throw new Error(`Erro ao buscar receitas da Mealie: ${mealieResponse.status}`);
    }
    
    const recipes = await mealieResponse.json();
    console.log(`üìö Encontradas ${recipes.items?.length || 0} receitas na Mealie`);
    
    // 2. Preparar contexto para o Ollama
    const recipeContext = recipes.items?.slice(0, 5).map((recipe: any) => ({
      name: recipe.name,
      description: recipe.description,
      ingredients: recipe.recipeIngredient?.map((ing: any) => ing.note || ing.display).join(', '),
      instructions: recipe.recipeInstructions?.map((inst: any) => inst.text).join('\n'),
      nutrition: recipe.nutrition
    })) || [];
    
    // 3. Testar se o Ollama consegue processar as receitas
    const prompt = `Voc√™ tem acesso √†s seguintes receitas da Mealie:

${recipeContext.map((recipe, index) => `
Receita ${index + 1}: ${recipe.name}
Descri√ß√£o: ${recipe.description}
Ingredientes: ${recipe.ingredients}
Instru√ß√µes: ${recipe.instructions}
`).join('\n')}

Responda apenas: "Conectado com sucesso! Tenho acesso a ${recipeContext.length} receitas da Mealie."
`;

    const ollamaResponse = await supabase.functions.invoke('gpt-chat', {
      body: {
        messages: [
          { role: 'system', content: 'Voc√™ √© um assistente que tem acesso √†s receitas da Mealie.' },
          { role: 'user', content: prompt }
        ],
        service: 'ollama',
        model: params.ollamaModel,
        temperature: 0.1,
        max_tokens: 100
      }
    });
    
    if (ollamaResponse.error) {
      throw new Error(`Erro no Ollama: ${ollamaResponse.error.message}`);
    }
    
    console.log('‚úÖ Integra√ß√£o Ollama + Mealie funcionando!');
    
    return {
      success: true,
      recipeCount: recipes.items?.length || 0,
      sampleRecipes: recipeContext
    };
    
  } catch (error) {
    console.error('‚ùå Erro na integra√ß√£o Ollama + Mealie:', error);
    return {
      success: false,
      recipeCount: 0,
      sampleRecipes: [],
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
  }
}

/**
 * Gera card√°pio usando Ollama com receitas da Mealie
 */
export async function generateMealPlanWithOllamaAndMealie(params: OllamaMealieIntegrationParams & {
  userPreferences: string[];
  restrictions: string[];
  targetCalories: number;
  days: number;
}): Promise<{
  success: boolean;
  mealPlan?: any;
  error?: string;
}> {
  try {
    console.log('ü§ñ Gerando card√°pio com Ollama + Mealie...');
    
    // 1. Buscar receitas da Mealie
    const mealieResponse = await fetch(`${params.mealieBaseUrl}/api/recipes?limit=100`, {
      headers: params.mealieApiKey ? {
        'Authorization': `Bearer ${params.mealieApiKey}`,
        'Content-Type': 'application/json'
      } : {
        'Content-Type': 'application/json'
      }
    });
    
    if (!mealieResponse.ok) {
      throw new Error(`Erro ao buscar receitas da Mealie: ${mealieResponse.status}`);
    }
    
    const recipes = await mealieResponse.json();
    const availableRecipes = recipes.items || [];
    
    console.log(`üìö Usando ${availableRecipes.length} receitas da Mealie`);
    
    // 2. Preparar prompt para o Ollama
    const recipeContext = availableRecipes.map((recipe: any) => ({
      name: recipe.name,
      description: recipe.description,
      ingredients: recipe.recipeIngredient?.map((ing: any) => ing.note || ing.display).join(', '),
      instructions: recipe.recipeInstructions?.map((inst: any) => inst.text).join('\n'),
      nutrition: recipe.nutrition,
      tags: recipe.tags?.map((tag: any) => tag.name).join(', ')
    }));
    
    const prompt = `Voc√™ √© um nutricionista especialista. Crie um card√°pio de ${params.days} dias usando APENAS as receitas da Mealie fornecidas.

RECEITAS DISPON√çVEIS NA MEALIE:
${recipeContext.map((recipe, index) => `
${index + 1}. ${recipe.name}
   Descri√ß√£o: ${recipe.description}
   Ingredientes: ${recipe.ingredients}
   Tags: ${recipe.tags}
   Calorias: ${recipe.nutrition?.calories || 'N/A'}
`).join('\n')}

REQUISITOS:
- Calorias di√°rias: ${params.targetCalories} kcal
- Prefer√™ncias: ${params.userPreferences.join(', ')}
- Restri√ß√µes: ${params.restrictions.join(', ')}
- Dias: ${params.days}

INSTRU√á√ïES:
1. Use apenas receitas da lista acima
2. Respeite as restri√ß√µes alimentares
3. Priorize as prefer√™ncias do usu√°rio
4. Distribua as calorias adequadamente
5. Varie as receitas entre os dias

Responda em formato JSON v√°lido com a estrutura do card√°pio.`;

    // 3. Gerar card√°pio com Ollama
    const ollamaResponse = await supabase.functions.invoke('gpt-chat', {
      body: {
        messages: [
          { role: 'system', content: 'Voc√™ √© um nutricionista especialista em criar card√°pios personalizados.' },
          { role: 'user', content: prompt }
        ],
        service: 'ollama',
        model: params.ollamaModel,
        temperature: 0.7,
        max_tokens: 2000
      }
    });
    
    if (ollamaResponse.error) {
      throw new Error(`Erro no Ollama: ${ollamaResponse.error.message}`);
    }
    
    const response = ollamaResponse.data?.choices?.[0]?.message?.content;
    if (!response) {
      throw new Error('Resposta vazia do Ollama');
    }
    
    // 4. Tentar parsear a resposta JSON
    try {
      const mealPlan = JSON.parse(response);
      console.log('‚úÖ Card√°pio gerado com Ollama + Mealie!');
      
      return {
        success: true,
        mealPlan
      };
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Erro ao parsear JSON, retornando resposta bruta');
      return {
        success: true,
        mealPlan: { rawResponse: response, recipes: recipeContext }
      };
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar card√°pio com Ollama + Mealie:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
  }
}
