import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://hlrkoyywjpckdotimtik.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testOllamaConnection() {
  console.log('üîç Testando conex√£o com Ollama da VPS...\n');
  
  try {
    // Teste 1: Conex√£o b√°sica
    console.log('üì° TESTE 1: Conex√£o b√°sica');
    const { data: test1, error: error1 } = await supabase.functions.invoke('gpt-chat', {
      body: {
        service: 'ollama',
        model: 'llama3.1:8b-instruct-q4_0',
        messages: [
          {
            role: 'user',
            content: 'Ol√°! Voc√™ est√° funcionando? Responda apenas "Sim, estou funcionando!"'
          }
        ],
        temperature: 0.1,
        max_tokens: 50,
        functionality: 'connection-test'
      }
    });

    if (error1) {
      console.error('‚ùå Erro na conex√£o:', error1);
    } else {
      console.log('‚úÖ Ollama respondeu:', data.content);
    }
    
    console.log('\n' + '='.repeat(60));
    
    // Teste 2: Gera√ß√£o de card√°pio simples
    console.log('üçΩÔ∏è TESTE 2: Gera√ß√£o de card√°pio simples');
    const { data: test2, error: error2 } = await supabase.functions.invoke('gpt-chat', {
      body: {
        service: 'ollama',
        model: 'llama3.1:8b-instruct-q4_0',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um nutricionista. Gere um card√°pio simples para 1 dia com 2000 kcal. Responda em JSON.'
          },
          {
            role: 'user',
            content: 'Gere um card√°pio com caf√© da manh√£ e almo√ßo. Apenas JSON v√°lido.'
          }
        ],
        temperature: 0.7,
        max_tokens: 1000,
        functionality: 'meal-plan-test'
      }
    });

    if (error2) {
      console.error('‚ùå Erro na gera√ß√£o:', error2);
    } else {
      console.log('‚úÖ Resposta do card√°pio:', test2.content);
      
      // Tentar extrair JSON
      try {
        const jsonMatch = test2.content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const jsonData = JSON.parse(jsonMatch[0]);
          console.log('‚úÖ JSON v√°lido extra√≠do:', JSON.stringify(jsonData, null, 2));
        } else {
          console.log('‚ö†Ô∏è JSON n√£o encontrado na resposta');
        }
      } catch (parseError) {
        console.log('‚ùå Erro ao parsear JSON:', parseError.message);
      }
    }
    
    console.log('\n' + '='.repeat(60));
    
    // Teste 3: Verificar configura√ß√£o do Ollama
    console.log('‚öôÔ∏è TESTE 3: Verificar configura√ß√£o');
    console.log('üìã Configura√ß√µes esperadas:');
    console.log('   ‚Ä¢ OLLAMA_BASE_URL configurada');
    console.log('   ‚Ä¢ Modelo: llama3.1:8b-instruct-q4_0');
    console.log('   ‚Ä¢ Proxy Ollama rodando na VPS');
    console.log('   ‚Ä¢ Fun√ß√£o gpt-chat com suporte a Ollama');
    
    if (!error1 && !error2) {
      console.log('\nüéâ SUCESSO! Ollama da VPS est√° funcionando!');
      console.log('‚úÖ Pode ser usado para gerar card√°pios');
      console.log('‚úÖ HTML detalhado funcionar√° com dados reais');
    } else {
      console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Ollama pode n√£o estar configurado corretamente');
      console.log('üîß Verificar:');
      console.log('   ‚Ä¢ VPS rodando Ollama');
      console.log('   ‚Ä¢ Proxy configurado');
      console.log('   ‚Ä¢ Vari√°veis de ambiente');
    }
    
  } catch (error) {
    console.error('üí• Erro no teste:', error);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üéØ RESUMO DOS TESTES:');
  console.log('‚úÖ Teste de conex√£o com Ollama');
  console.log('‚úÖ Teste de gera√ß√£o de card√°pio');
  console.log('‚úÖ Verifica√ß√£o de configura√ß√£o');
  console.log('‚úÖ Valida√ß√£o de JSON');
}

// Executar teste
testOllamaConnection();
