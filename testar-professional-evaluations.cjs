const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const SUPABASE_URL = "https://hlrkoyywjpckdotimtik.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testarProfessionalEvaluations() {
  console.log('üß™ Testando funcionalidade da tabela professional_evaluations...\n');

  try {
    // 1. Verificar se conseguimos fazer login
    console.log('üîê Testando autentica√ß√£o...');
    
    // Vou tentar fazer login com um email de teste
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'v@gmail.com',
      password: 'teste123'
    });

    if (authError) {
      console.log('‚ö†Ô∏è Erro de autentica√ß√£o:', authError.message);
      console.log('üí° Vou tentar sem autentica√ß√£o...');
    } else {
      console.log('‚úÖ Autenticado como:', authData.user?.email);
    }

    // 2. Verificar se a tabela existe e est√° acess√≠vel
    console.log('\nüìã Verificando acesso √† tabela...');
    
    const { data: tableCheck, error: tableError } = await supabase
      .from('professional_evaluations')
      .select('id')
      .limit(1);

    if (tableError) {
      console.log('‚ùå Erro ao acessar tabela:', tableError.message);
      console.log('üí° Execute o script SQL para corrigir as pol√≠ticas RLS');
      return;
    } else {
      console.log('‚úÖ Tabela acess√≠vel');
      console.log(`üìä Avalia√ß√µes existentes: ${tableCheck?.length || 0}`);
    }

    // 3. Tentar inserir uma avalia√ß√£o de teste
    console.log('\nüìù Testando inser√ß√£o de avalia√ß√£o...');
    
    const testEvaluation = {
      user_id: authData?.user?.id || '00000000-0000-0000-0000-000000000000',
      evaluation_date: new Date().toISOString().split('T')[0],
      weight_kg: 75.0,
      abdominal_circumference_cm: 85.0,
      waist_circumference_cm: 80.0,
      hip_circumference_cm: 95.0,
      body_fat_percentage: 18.5,
      fat_mass_kg: 14.0,
      lean_mass_kg: 61.0,
      muscle_mass_kg: 58.0,
      bmi: 24.8,
      bmr_kcal: 1650,
      waist_to_height_ratio: 0.45,
      waist_to_hip_ratio: 0.84,
      muscle_to_fat_ratio: 4.1,
      risk_level: 'low',
      notes: 'Teste de funcionalidade',
      evaluator_id: authData?.user?.id || '00000000-0000-0000-0000-000000000000'
    };

    const { data: insertedEvaluation, error: insertError } = await supabase
      .from('professional_evaluations')
      .insert(testEvaluation)
      .select()
      .single();

    if (insertError) {
      console.log('‚ùå Erro ao inserir avalia√ß√£o:', insertError.message);
      console.log('üí° Problema de permiss√£o - execute o script SQL');
    } else {
      console.log('‚úÖ Avalia√ß√£o inserida com sucesso!');
      console.log('üìä ID:', insertedEvaluation.id);
      console.log('üìÖ Data:', insertedEvaluation.evaluation_date);
      console.log('‚öñÔ∏è Peso:', insertedEvaluation.weight_kg, 'kg');
      
      // 4. Tentar buscar a avalia√ß√£o inserida
      console.log('\nüîç Testando busca da avalia√ß√£o...');
      
      const { data: fetchedEvaluation, error: fetchError } = await supabase
        .from('professional_evaluations')
        .select('*')
        .eq('id', insertedEvaluation.id)
        .single();

      if (fetchError) {
        console.log('‚ùå Erro ao buscar avalia√ß√£o:', fetchError.message);
      } else {
        console.log('‚úÖ Avalia√ß√£o encontrada na busca');
        console.log('üìä % Gordura:', fetchedEvaluation.body_fat_percentage, '%');
        console.log('üìä IMC:', fetchedEvaluation.bmi);
      }

      // 5. Remover a avalia√ß√£o de teste
      console.log('\nüóëÔ∏è Removendo avalia√ß√£o de teste...');
      
      const { error: deleteError } = await supabase
        .from('professional_evaluations')
        .delete()
        .eq('id', insertedEvaluation.id);

      if (deleteError) {
        console.log('‚ö†Ô∏è Erro ao remover avalia√ß√£o:', deleteError.message);
      } else {
        console.log('‚úÖ Avalia√ß√£o de teste removida');
      }
    }

    // 6. Verificar usu√°rios dispon√≠veis
    console.log('\nüë• Verificando usu√°rios...');
    
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id, full_name, email')
      .limit(5);

    if (usersError) {
      console.log('‚ö†Ô∏è Erro ao buscar usu√°rios:', usersError.message);
    } else {
      console.log(`‚úÖ Usu√°rios encontrados: ${users?.length || 0}`);
      if (users && users.length > 0) {
        console.log('üìã Usu√°rios dispon√≠veis:');
        users.forEach(user => {
          console.log(`   - ${user.full_name} (${user.email})`);
        });
      }
    }

    console.log('\nüéâ Teste conclu√≠do!');
    
    if (insertError) {
      console.log('\n‚ùå PROBLEMA IDENTIFICADO:');
      console.log('   As pol√≠ticas RLS est√£o impedindo a inser√ß√£o');
      console.log('   Execute o script: aplicar-rls-professional-evaluations.sql');
    } else {
      console.log('\n‚úÖ TUDO FUNCIONANDO:');
      console.log('   - Tabela acess√≠vel');
      console.log('   - Inser√ß√£o funcionando');
      console.log('   - Busca funcionando');
      console.log('   - Exclus√£o funcionando');
      console.log('   - Hook corrigido e pronto para uso');
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testarProfessionalEvaluations();
}

module.exports = { testarProfessionalEvaluations };
