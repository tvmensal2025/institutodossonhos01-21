const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://hlrkoyywjpckdot.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseKey) {
  console.error('‚ùå VITE_SUPABASE_ANON_KEY n√£o configurada');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testarRespostasHumanizadas() {
  console.log('üß™ Testando respostas humanizadas da Sofia...\n');

  const perguntas = [
    "Oi Sofia, estou com fome!",
    "Conte-me sobre o Instituto dos Sonhos",
    "Quem s√£o os fundadores?",
    "Preciso de dicas para emagrecer"
  ];

  for (const pergunta of perguntas) {
    console.log(`üìù Pergunta: "${pergunta}"`);
    
    try {
      const response = await fetch(`${supabaseUrl}/functions/v1/gpt-chat`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${supabaseKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          functionality: 'chat_daily',
          messages: [
            {
              role: 'user',
              content: pergunta
            }
          ]
        })
      });

      if (response.ok) {
        const data = await response.json();
        const resposta = data.response || data.message || 'Resposta recebida';
        
        console.log(`‚úÖ Resposta (${resposta.length} caracteres):`);
        console.log(`"${resposta}"`);
        console.log(`üìä Tamanho: ${resposta.length} caracteres`);
        console.log('---\n');
      } else {
        console.error(`‚ùå Erro: ${response.status}`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao testar: ${error.message}`);
    }
    
    // Aguardar entre as perguntas
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

async function verificarConfiguracoes() {
  console.log('üîç Verificando configura√ß√µes atuais...\n');
  
  try {
    const { data: configs, error } = await supabase
      .from('ai_configurations')
      .select('*')
      .in('functionality', ['chat_daily', 'medical_analysis']);

    if (error) {
      console.error('‚ùå Erro ao buscar configura√ß√µes:', error);
      return;
    }

    configs.forEach(config => {
      console.log(`üéØ ${config.functionality}:`);
      console.log(`   ‚Ä¢ Servi√ßo: ${config.service}`);
      console.log(`   ‚Ä¢ Modelo: ${config.model}`);
      console.log(`   ‚Ä¢ Tokens: ${config.max_tokens}`);
      console.log(`   ‚Ä¢ Temperature: ${config.temperature}`);
      console.log(`   ‚Ä¢ Personalidade: ${config.personality}`);
      console.log(`   ‚Ä¢ System Prompt: ${config.system_prompt ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
      console.log('');
    });
  } catch (error) {
    console.error('‚ùå Erro:', error);
  }
}

// Executar testes
async function main() {
  await verificarConfiguracoes();
  await testarRespostasHumanizadas();
}

main().catch(console.error);


