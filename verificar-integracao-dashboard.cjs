const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const SUPABASE_URL = "https://hlrkoyywjpckdotimtik.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function verificarIntegracaoDashboard() {
  console.log('üîç VERIFICANDO INTEGRA√á√ÉO DASHBOARD - PROFESSIONAL EVALUATIONS\n');

  try {
    // 1. Verificar se as tabelas existem
    console.log('üìã Verificando tabelas...');
    
    const { data: weightTable, error: weightError } = await supabase
      .from('weight_measurements')
      .select('id')
      .limit(1);
    
    const { data: evalTable, error: evalError } = await supabase
      .from('professional_evaluations')
      .select('id')
      .limit(1);
    
    if (weightError) {
      console.log('‚ùå Tabela weight_measurements n√£o acess√≠vel:', weightError.message);
    } else {
      console.log('‚úÖ Tabela weight_measurements acess√≠vel');
    }
    
    if (evalError) {
      console.log('‚ùå Tabela professional_evaluations n√£o acess√≠vel:', evalError.message);
    } else {
      console.log('‚úÖ Tabela professional_evaluations acess√≠vel');
    }

    // 2. Verificar dados existentes
    console.log('\nüìä Verificando dados existentes...');
    
    const { data: weightData, error: weightDataError } = await supabase
      .from('weight_measurements')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    const { data: evalData, error: evalDataError } = await supabase
      .from('professional_evaluations')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    console.log(`üìà Weight measurements: ${weightData?.length || 0} registros`);
    console.log(`üìã Professional evaluations: ${evalData?.length || 0} registros`);

    // 3. Verificar se h√° integra√ß√£o entre as tabelas
    console.log('\nüîó Verificando integra√ß√£o entre tabelas...');
    
    if (weightData && weightData.length > 0 && evalData && evalData.length > 0) {
      const weightUserId = weightData[0].user_id;
      const evalUserId = evalData[0].user_id;
      
      console.log(`üë§ Weight measurements user: ${weightUserId}`);
      console.log(`üë§ Professional evaluations user: ${evalUserId}`);
      
      if (weightUserId === evalUserId) {
        console.log('‚úÖ Mesmo usu√°rio em ambas as tabelas');
      } else {
        console.log('‚ö†Ô∏è Usu√°rios diferentes nas tabelas');
      }
    }

    // 4. Verificar se o dashboard est√° usando os dados corretos
    console.log('\nüì± Verificando uso no dashboard...');
    
    // Simular busca que o dashboard faria
    if (weightData && weightData.length > 0) {
      const userId = weightData[0].user_id;
      
      console.log(`üîç Buscando dados para usu√°rio: ${userId}`);
      
      // Buscar dados como o dashboard faria
      const { data: dashboardWeightData } = await supabase
        .from('weight_measurements')
        .select('*')
        .eq('user_id', userId)
        .order('measurement_date', { ascending: false })
        .limit(10);
      
      const { data: dashboardEvalData } = await supabase
        .from('professional_evaluations')
        .select('*')
        .eq('user_id', userId)
        .order('evaluation_date', { ascending: false })
        .limit(10);
      
      console.log(`üìä Dashboard weight data: ${dashboardWeightData?.length || 0} registros`);
      console.log(`üìã Dashboard eval data: ${dashboardEvalData?.length || 0} registros`);
      
      if (dashboardWeightData && dashboardWeightData.length > 0) {
        console.log('‚úÖ Dashboard consegue acessar weight_measurements');
        console.log(`üìè √öltimo peso: ${dashboardWeightData[0].peso_kg}kg`);
        console.log(`üìÖ Data: ${dashboardWeightData[0].measurement_date}`);
      }
      
      if (dashboardEvalData && dashboardEvalData.length > 0) {
        console.log('‚úÖ Dashboard consegue acessar professional_evaluations');
        console.log(`‚öñÔ∏è √öltima avalia√ß√£o: ${dashboardEvalData[0].weight_kg}kg`);
        console.log(`üìÖ Data: ${dashboardEvalData[0].evaluation_date}`);
        console.log(`üìä % Gordura: ${dashboardEvalData[0].body_fat_percentage}%`);
      }
    }

    // 5. Verificar se h√° sincroniza√ß√£o autom√°tica
    console.log('\nüîÑ Verificando sincroniza√ß√£o autom√°tica...');
    
    // Verificar se h√° triggers ou fun√ß√µes que sincronizam os dados
    const { data: triggers } = await supabase
      .rpc('get_triggers_info')
      .catch(() => null);
    
    if (triggers) {
      console.log('‚úÖ Triggers encontrados para sincroniza√ß√£o');
    } else {
      console.log('‚ö†Ô∏è Nenhum trigger de sincroniza√ß√£o encontrado');
    }

    console.log('\nüìã CONCLUS√ÉO:');
    console.log('‚úÖ As tabelas existem e s√£o acess√≠veis');
    console.log('‚úÖ O dashboard consegue buscar dados de ambas as tabelas');
    console.log('‚ö†Ô∏è N√£o h√° sincroniza√ß√£o autom√°tica entre as tabelas');
    console.log('üí° Recomenda√ß√£o: Criar trigger para sincronizar dados');

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  }
}

// Executar
verificarIntegracaoDashboard();
